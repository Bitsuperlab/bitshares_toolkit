{
  "category": "Game Methods",
  "methods" : [
      {
          "method_name" : "game_buy_chips",
          "description" : "Exchange lto for chips",
          "return_type" : "transaction_record",
          "parameters"  : [
          {
              "name" : "from_account_name",
              "type" : "account_name",
              "description" : "the account that will provide funds for the bid"
          },
          {
              "name" : "quantity",
              "type" : "string",
              "description" : "the quantity of items you would like to buy"
          },
          {
              "name" : "quantity_symbol",
              "type" : "asset_symbol",
              "description" : "the type of chips you would like to buy"
          }
          ],
          "prerequisites" : ["wallet_unlocked"],
          "aliases" : [ "buy_chips" ]
      },
      {
          "method_name" : "game_create",
          "description" : "Creates a new game and binding to an asset",
          "return_type" : "transaction_record",
          "parameters"  : [
          {
              "name" : "game_name",
              "type" : "string",
              "description" : "the name of the game"
          },
          {
              "name" : "owner_name",
              "type" : "string",
              "description" : "the name of the owner of the game"
          },
          {
              "name" : "script_url",
              "type" : "string",
              "description" : "the url of the rule script for this game"
          },
          {
             "name" : "script_hash",
             "type" : "string",
             "description" : "the hash of the rule script"
          },
          {
              "name" : "description",
              "type" : "string",
              "description" : "a description of the asset"
          },
          {
              "name" : "public_data",
              "type" : "json_variant",
              "description" : "arbitrary data attached to the asset",
              "default_value" : null
          }
          ],
          "prerequisites" : ["wallet_unlocked"]
      },
      {
          "method_name" : "game_update",
          "description" : "Update a exist game",
          "return_type" : "transaction_record",
          "parameters"  : [
          {
              "name" : "paying_account",
              "type" : "string",
              "description" : "the name of the paying account"
          },
          {
              "name" : "game_name",
              "type" : "string",
              "description" : "the name of the game"
          },
          {
              "name" : "script_url",
              "type" : "string",
              "description" : "the url of the rule script for this game"
          },
          {
              "name" : "script_hash",
              "type" : "string",
              "description" : "the hash of the rule script"
          },
          {
              "name" : "description",
              "type" : "string",
              "description" : "a description of the asset"
          },
          {
              "name" : "public_data",
              "type" : "json_variant",
              "description" : "arbitrary data attached to the asset",
              "default_value" : null
          }
          ],
          "prerequisites" : ["wallet_unlocked"]
      },
      {
          "method_name" : "game_play",
          "description" : "Play game with param variant",
          "return_type" : "transaction_record",
          "parameters"  : [
          {
              "name" : "game_name",
              "type" : "string",
              "description" : "the name of the game"
          },
          {   "name" : "param",
              "type" : "json_variant",
              "description" : "the param of the game action"
          }
          ],
          "prerequisites" : ["wallet_unlocked"]
      },
      {
          "method_name": "game_list_datas",
          "description": "Returns stored game datas starting with a given game name upto a the limit provided",
          "return_type": "game_data_record_array",
          "cached"   : true,
          "parameters" : [
          {
              "name" : "game_name",
              "type" : "account_name",
              "description" : "the game name to include",
              "default_value" : ""
          },
          {
              "name" : "limit",
              "type" : "uint32_t",
              "description" : "the maximum number of items to list",
              "default_value" : 20
          }
          ],
          "is_const" : true,
          "prerequisites" : ["no_prerequisites"]
      },
      {
          "method_name": "game_status",
          "description": "Returns the status of a particular game, including any trading errors.",
          "cached"      : true,
          "return_type": "game_status",
          "parameters" : [
          {
              "name" : "game_name",
              "type" : "account_name",
              "description" : "the game name to include",
              "default_value" : ""
          }
          ],
          "is_const" : true,
          "prerequisites" : ["no_prerequisites"]
      },
      {
          "method_name": "game_list_status",
          "description": "Returns a list of active game statuses",
          "cached"      : true,
          "return_type": "game_status_array",
          "parameters" : [],
          "is_const" : true,
          "prerequisites" : ["no_prerequisites"]
      },
      {
          "method_name": "game_list_result_transactions",
          "description": "Returns a list of game result transactions executed on a given block.",
          "cached"      : true,
          "return_type": "game_result_transaction_array",
          "parameters" : [
          {
              "name" : "block_number",
              "type" : "uint32_t",
              "description" : "Block to get game result transaction operations for."
          }
          ],
          "is_const" : true,
          "prerequisites" : ["no_prerequisites"]
      },
      {
          "method_name": "game_util_cnr",
          "description": "Calculate the C(N,r) of space N in uint16_t(0-65535) and r in uint16_t(0-65535)",
          "cached"      : true,
          "return_type": "uint64_t",
          "parameters" : [
          {
              "name" : "N",
              "type" : "uint16_t",
              "description" : "The N number in C(N, r)"
          },
          {
              "name" : "r",
              "type" : "uint16_t",
              "description" : "The r number in C(N, r)"
          }
          ],
          "is_const" : true,
          "prerequisites" : ["no_prerequisites"]
      },
      {
          "method_name": "game_util_ranking",
          "description": "Mapping an array of uint16_t(0-65535) to ralated combination nature number",
          "cached"      : true,
          "return_type": "uint64_t",
          "parameters" : [
          {
              "name" : "combination",
              "type" : "uint16_t_array",
              "description" : "The combination nature number mapped by the combination array"
          }
          ],
          "is_const" : true,
          "prerequisites" : ["no_prerequisites"]
      },
      {
          "method_name": "game_util_unranking",
          "description": "Mapping an array of uint16_t(0-65535) to ralated combination nature number",
          "cached"      : true,
          "return_type": "uint16_t_array",
          "parameters" : [
          {
              "name" : "number",
              "type" : "uint64_t",
              "description" : "The nature number to be mapped by the combination array, should be less than C(N,k)"
          },
          {
              "name" : "k",
              "type" : "uint16_t",
              "description" : "The k number in C(N, k)"
          },
          {
              "name" : "N",
              "type" : "uint16_t",
              "description" : "The N number in C(N, k)"
          }
          ],
          "is_const" : true,
          "prerequisites" : ["no_prerequisites"]
      }
] }
